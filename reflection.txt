EFFECT OF PID COMPONENTS

The P component causes the vehicle to correct course. A higher P component makes the vehicle turn toward the center of the lane when it drifts. However a higher P also causes the vehicle to overshoot and slalom back and forth as it tries to correct course. A lower P makes the vehicle take more time before it corrects. If P is too low the vehicle can leave the lane in turns since it cannot react to the drift quickly enough. I expected and observed this behavior in my implementation.

The I component causes any permanent steering alignment issue to be corrected. If it is too large, the vehicle begins to overshoot more and more as time goes on. If it is too small, the vehicle drifts to one side or the other over time. I found that a very small value of I was necessary to keep the vehicle going straight, but anything larger would cause wild slaloming later in the course. I did not know at the start if the simulator had an alignment error, but setting this to zero did lead to drift. Given this behavior, setting this value to non-zero had the expected effect.

The D component smoothes out the approaches to the center line. If this value is too low, then the vehicle overshoots the center line and begins slaloming. If this is too high, then the vehicle takes too long to return to the center line and turns sluggishly. I found that P and I had to be of the same magnitude, with D larger, and breaking the relationship between the two would make control unstable. I did expect a relationship between the P and D components although I did not know the magnitude of this relationship.

I also used a P controller to control the vehicle speed. To encourage speedup in when the error was low, I inverted the negative control tracking error for each sample. The inversion produced a larger speed when the error was smaller, and the negative sign was necessary since I had fixed my PID coefficients to be positive. As expected, when I increased the P component, the vehicle sped up more when the CTE was low. However if I made the P component too high, the vehicle would careen off the track. I also imposed a minimum speed limit so that the vehicle did not get stuck.

PID COEFFICIENT DISCOVERY

To discover the final parameters, I implemented "online" twiddle. The control code contains a state machine that uses the cumulative error from a fixed number of sample to periodically tune one of the components for both the steering and speed controllers. At first I had no idea what reasonable values would be for the two controllers, so I set all coefficients to one and ran the simulation. The twiddle parameters were printed out so that I could gradually seed the run with better and better values. Eventually after many iterations the PID coefficients became stable enough to circle the track, with the online twiddling continuing to optimize them. I was able to consistently achieve optimal speed coefficients, but I did not run the simulation long enough to stop twiddling the steering coefficients. However the seeded values should be able to complete at least one lap of the track. 

